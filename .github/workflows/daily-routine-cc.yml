name: Daily Routine CC

on:
  schedule:
    - cron: 0 22 * * *
  workflow_dispatch:
jobs:
  run-cc:
    environment: daily-routine-cc
    runs-on: ubuntu-latest
    services:
      # https://github.com/Hagb/docker-easyconnect
      easyconnect-sslvpn-socks5:
        image: hagb/docker-easyconnect:cli
        ports:
          - 127.0.0.1:1080:1080
        env:
          EC_VER: 7.6.7
          CLI_OPTS: >-
            -d '${{ secrets.SSLVPN_URI }}'
            -t pwd
            -u '${{ secrets.SSLVPN_USER }}'
            -p '${{ secrets.SSLVPN_PASS }}'
        options: >-
          --device /dev/net/tun --cap-add NET_ADMIN
          --health-cmd "pidof svpnservice > /dev/null || exit 1" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # setup
      - name: Check out the workspace
        if: ${{ always() }}
        uses: actions/checkout@v2
      # node
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-
      - name: Run coronavirus chore
        env:
          CC_METADATA: ${{ secrets.CC_METADATA }}
          SOCKS5_PROXY: 127.0.0.1:1080 # ${{ job.services.easyconnect-sslvpn-socks5.ports['1080'] }}
        run: |
          cd web-automation
          mkdir -p .secrets
          cat>.secrets/cc-metadata.js<<EOF
          ${CC_METADATA}
          EOF
          npm install 1>/dev/null
          node coronavirus-chore.js --sanitize --socks5 "${SOCKS5_PROXY}" 1>/dev/null
      - name: Report Status
        if: ${{ failure() }}
        run: |
          node - <<'EOF'
            const notify = require("./.github/scripts/notify.js");
            const env = name => process.env[name];
            notify(
              env("WEBHOOK_URL"), env("WEBHOOK_KEY"), env("WEBHOOK_SECRET")
            );
          EOF
        env:
          WEBHOOK_URL: ${{ secrets.NOTIFY_WEBHOOK_URL }}
          WEBHOOK_KEY: ${{ secrets.NOTIFY_WEBHOOK_KEY }}
          WEBHOOK_SECRET: ${{ secrets.NOTIFY_WEBHOOK_SECRET }}
          INPUT_STATUS: "failed"
          INPUT_TOKEN: ${{ secrets.NOTIFY_GITHUB_TOKEN }}
          INPUT_NOTIFICATION_TITLE: ${{ secrets.NOTIFY_TITLE }}
      - name: Post cleaning
        if: ${{ always() }}
        run: rm -rf .secrets *.dump
